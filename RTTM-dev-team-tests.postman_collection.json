{
	"info": {
		"_postman_id": "2f976353-3775-4f86-bcaf-cb7045d6a4e7",
		"name": "RTTM-dev-team-tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "get-user",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "75b041b6-eb0f-429e-adc5-97b36c358e29",
						"exec": [
							"pm.test('should be a user obj',()=>{",
							"    let res = pm.response.json()",
							"    pm.expect(typeof res).to.eql('object')",
							"})",
							"",
							"pm.test('should be a user at id 1',()=>{",
							"    let res = pm.response.json()",
							"    pm.expect(res.user_id).to.eql(1)",
							"})",
							"",
							"pm.test('should have good status code',()=>{",
							"    pm.response.to.have.status(200)",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://localhost:3535/auth/user",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3535",
					"path": [
						"auth",
						"user"
					]
				}
			},
			"response": []
		},
		{
			"name": "update-user",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "9c18eb48-5f42-450f-8f00-9c26cd6070c6",
						"exec": [
							"pm.test('should return an obj',()=>{",
							"    let resp = pm.response.json()",
							"    pm.expect(typeof resp).to.eql('object')",
							"})",
							"pm.test('should be a user at id \"things and words\"',()=>{",
							"    let res = pm.response.json()",
							"    pm.expect(res.username).to.eql(\"things and words\")",
							"})",
							"",
							"pm.test('should have good status code',()=>{",
							"    pm.response.to.have.status(200)",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"user_id\": \"1\",\n\t\"icon\": \"https://lh4.googleusercontent.com/-Llirg-RZevI/AAAAAAAAAAI/AAAAAAAACxc/_OChws55Ow0/photo.jpg\",\n\t\"username\": \"things and words\"\n\t\n}"
				},
				"url": {
					"raw": "http://localhost:3535/api/user",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3535",
					"path": [
						"api",
						"user"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete-user",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "812959d8-eb8d-44b5-a7d8-6d02802ae258",
						"exec": [
							"pm.test('should return a string',()=>{",
							"    let res = pm.response.json()",
							"    pm.expect(typeof res).to.eql(\"object\")",
							"})",
							"",
							"pm.test('should be \"what the f*** why are you deleting?\"',()=>{",
							"    let res = pm.response.json()",
							"    pm.expect(res.words).to.eql('what the f*** why are you deleting?')",
							"})",
							"",
							"pm.test('should have good status code',()=>{",
							"    pm.response.to.have.status(200)",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://localhost:3535/api/user?user_id=3",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3535",
					"path": [
						"api",
						"user"
					],
					"query": [
						{
							"key": "user_id",
							"value": "3"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "get-scores",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "ff38f2d8-1e3d-4adf-b327-8d41a7c35bba",
						"exec": [
							"pm.test('should return an obj',()=>{",
							"    let resp = pm.response.json()",
							"    pm.expect(typeof resp).to.eql('object')",
							"})",
							"pm.test('should be a score object\"',()=>{",
							"    let res = pm.response.json()",
							"    pm.expect(typeof res[1]).to.eql(\"object\")",
							"})",
							"",
							"",
							"pm.test('should have good status code',()=>{",
							"    pm.response.to.have.status(200)",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://localhost:3535/api/scores",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3535",
					"path": [
						"api",
						"scores"
					]
				}
			},
			"response": []
		},
		{
			"name": "add-scores",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "5b59f2ca-759e-4c0b-a00b-0a109bd977fe",
						"exec": [
							"pm.test('should return an obj',()=>{",
							"    let resp = pm.response.json()",
							"    pm.expect(typeof resp).to.eql('object')",
							"})",
							"pm.test('should be a user at id \"things and words\"',()=>{",
							"    let res = pm.response.json()",
							"    pm.expect(res.points).to.eql(123213)",
							"})",
							"",
							"pm.test('should have good status code',()=>{",
							"    pm.response.to.have.status(200)",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"totalTime\": 120000,\n\t\"astScore\": 123213\n}"
				},
				"url": {
					"raw": "http://localhost:3535/api/scores?user_id=2",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3535",
					"path": [
						"api",
						"scores"
					],
					"query": [
						{
							"key": "user_id",
							"value": "2"
						}
					]
				}
			},
			"response": []
		}
	]
}